# Copyright (c) 2017, 2018 Trough Creek Holdings, LLC.  All Rights Reserved.

# NB: requires "experimental" mode because Docker is dumb as rocks
ifneq (${DOCKER_SQUASH},)
DOCKER_SQUASH:=--squash
export DOCKER_SQUASH
endif

DOCKERB_FORCE_ON_COMMIT ?=

# Make docker_* dependency of non-docker version
$(foreach _, init check depend clean nuke reset, $(eval $_: docker_$_))
$(foreach _, init check depend clean nuke reset, $(eval .PHONY: docker_$_))

DOCKERB_ARGS := $(foreach v, $(filter-out DOCKERB_FORCE_ON_COMMIT, $(filter DOCKERB_%, ${.VARIABLES})), $(patsubst DOCKERB_%,%,$v)=$($(v)))

DOCKER_TAG_WRAPPER_SYSTEM_ARGS := $(if ${DOCKER_AWS_REGION}, --aws-region ${DOCKER_AWS_REGION},) $(if ${DOCKER_AWS_PROFILE}, --aws-profile ${DOCKER_AWS_PROFILE},) $(if ${DOCKER_AWS_REGISTRY_IDS}, --aws-registry-id ${DOCKER_AWS_REGISTRY_IDS})

define DOCKER_BUILD_template
build/Dockerfile.${1}: src/${1}.dockerb
	${ROOT}/mk/scripts/dockerb -o build/Dockerfile.${1} src/${1}.dockerb ${DOCKERB_ARGS}

build/Dockerfile.${1}.dockerignore:
	if [ -f src/${1}.dockerignore ] ; then                          \
		cmp -s src/${1}.dockerignore build/Dockerfile.${1}.dockerignore || cp -f src/${1}.dockerignore build/Dockerfile.${1}.dockerignore       ; \
	fi

docker_expand_${1}: build/Dockerfile.${1} build/Dockerfile.${1}.dockerignore

docker_build_${1}: docker_expand_${1}
ifeq ($(filter ${1},${DOCKERB_FORCE_ON_COMMIT}),)
	${ROOT}/mk/scripts/docker-build-wrapper ${DOCKER_BUILD_ARGS} ${1}
else
	${ROOT}/mk/scripts/docker-build-wrapper --force-on-commit ${DOCKER_BUILD_ARGS} ${1}
endif

docker_build_force_${1}: docker_expand_${1}
	${ROOT}/mk/scripts/docker-build-wrapper --force ${DOCKER_BUILD_ARGS} ${1}

docker_rebuild_${1}: docker_stamp_nuke_${1} docker_build_force_${1}

docker_clean_${1}:
	@docker images -q --filter "dangling=true" ${DOCKER_NS}:${1}-${REVISION} | xargs -I{} -r bash -c 'echo "Removing images: {}"; docker rmi --force {}'

docker_stamp_nuke_${1}:
	rm -f build/.stamp.*.${1}

docker_nuke_${1}: docker_stamp_nuke_${1}
	@rm -f build/Dockerfile.${1}
	@docker images -q "${DOCKER_NS}:${1}-[0-9]*" | xargs -I{} -r bash -c 'echo "Removing images: {}"; docker rmi --force {}'

# Currently a dummy target as build tags locally
docker_tag_${1}:
	@/bin/true

docker_local_tag_${1}: docker_tag_${1}
	${ROOT}/mk/scripts/docker-tag-wrapper ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} tag_local ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}

docker_remote_tag_${1}: docker_tag_${1}
	${ROOT}/mk/scripts/docker-tag-wrapper ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} tag ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}

docker_remote_push_${1}: docker_remote_tag_${1}
	${ROOT}/mk/scripts/docker-tag-wrapper ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} push ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}

docker_remote_pull_${1}:
	${ROOT}/mk/scripts/docker-tag-wrapper ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} pull ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}

docker_remote_pull_latest_${1}:
	${ROOT}/mk/scripts/docker-tag-wrapper ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} --label-only-latest pull ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}

ifndef DOCKER_REMOTE_CACHE_DISABLE
# Pull but allow failures (we're just warming the local cache)
docker_remote_cache_${1}:
	${ROOT}/mk/scripts/docker-tag-wrapper --force ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} pull ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}
	${ROOT}/mk/scripts/docker-tag-wrapper --force ${DOCKER_TAG_WRAPPER_SYSTEM_ARGS} ${DOCKER_TAG_WRAPPER_ARGS} tag ${DOCKER_REGISTRY} ${DOCKER_REPOSITORY} ${DOCKER_NS} ${1} ${REVISION}
else
docker_remote_cache_${1}:
	@/bin/true
endif
endef

ifdef DOCKER_CONTAINERS
$(foreach t, ${DOCKER_CONTAINERS}, $(eval $(call DOCKER_BUILD_template,$t)))
docker_rebuild: docker_nuke docker_build
endif

ifndef DOCKER_REMOTE_CONTAINERS
DOCKER_REMOTE_CONTAINERS := ${DOCKER_CONTAINERS}
endif

define DOCKER_COMPOSE_template
.PHONY: docker_compose_${1}
build/compose-${1}.yml: src/compose-${1}.yml.erb
ifeq ("$(wildcard ${ROOT}/config/dockerb-${1}.yml)", "")
ifeq ("$(wildcard ${ROOT}/config/dockerb.yml)", "")
	${ROOT}/mk/scripts/dockerb -o build/compose-${1}.yml src/compose-${1}.yml.erb ${DOCKERB_ARGS}
else
	${ROOT}/mk/scripts/dockerb -c ${ROOT}/config/dockerb.yml -o build/compose-${1}.yml src/compose-${1}.yml.erb ${DOCKERB_ARGS}
endif
else
	${ROOT}/mk/scripts/dockerb -c ${ROOT}/config/dockerb-${1}.yml -o build/compose-${1}.yml src/compose-${1}.yml.erb ${DOCKERB_ARGS}
endif

docker_compose_${1}: build/compose-${1}.yml
endef

ifdef DOCKER_COMPOSITIONS
$(foreach t, ${DOCKER_COMPOSITIONS}, $(eval $(call DOCKER_COMPOSE_template,$t)))
endif

ifdef DOCKER_CONTAINERS
docker_depend:
	(cd $(abspath $(dir ${CURDIR})) && ${ROOT}/mk/scripts/docker-deps -p ${DOCKER_NS} -f make gen docker) > Makefile.deps
	for t in ${DOCKER_CONTAINERS} ; do echo src/$${t}.dockerb: ${REL_ROOT}/REVISION >> Makefile.deps ; done
	for t in ${DOCKER_COMPOSITIONS} ; do echo build/compose-$${t}.yml: src/compose-$${t}.yml.erb >> Makefile.deps ; done
	for t in ${DOCKER_COMPOSITIONS} ; do echo src/compose-$${t}.yml.erb: ${REL_ROOT}/REVISION >> Makefile.deps ; done
else
docker_depend:
endif

docker_compile: $(patsubst %, docker_expand_%, ${DOCKER_CONTAINERS}) $(patsubst %, docker_compose_%, ${DOCKER_COMPOSITIONS})

docker_build: $(patsubst %, docker_build_%, ${DOCKER_CONTAINERS})

docker_tag: $(patsubst %, docker_tag_%, ${DOCKER_CONTAINERS})

docker_local_tag: $(patsubst %, docker_local_tag_%, ${DOCKER_REMOTE_CONTAINERS})

docker_remote_tag: $(patsubst %, docker_remote_tag_%, ${DOCKER_REMOTE_CONTAINERS})

docker_remote_push: $(patsubst %, docker_remote_push_%, ${DOCKER_REMOTE_CONTAINERS})

docker_remote_pull: $(patsubst %, docker_remote_pull_%, ${DOCKER_REMOTE_CONTAINERS})

docker_remote_pull_latest: $(patsubst %, docker_remote_pull_latest_%, ${DOCKER_REMOTE_CONTAINERS})

docker_remote_cache: $(patsubst %, docker_remote_cache_%, ${DOCKER_REMOTE_CONTAINERS})

docker_clean: $(patsubst %,docker_clean_%, ${DOCKER_CONTAINERS}) docker_prune

docker_nuke: docker_cleanup $(call func_reverse, $(patsubst %,docker_nuke_%, ${DOCKER_CONTAINERS}))
	docker volume prune -f
	docker builder prune -a -f

docker_prune:
	docker container prune -f
	docker image prune -f
	docker builder prune -f

docker_cleanup: docker_prune
	docker images "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}" --format "{{.Repository}}:{{.Tag}}" | grep -v ':<none>$$' | xargs -r docker rmi --force
	docker images "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}" --format "{{.Digest}}" | xargs -r docker rmi --force

docker_login:
	aws $(if ${DOCKER_AWS_PROFILE}, --profile ${DOCKER_AWS_PROFILE},) ecr get-login --no-include-email $(if ${DOCKER_AWS_REGISTRY_IDS}, --registry-ids ${DOCKER_AWS_REGISTRY_IDS}) $(if ${AWS_REGION}, --region ${AWS_REGION},) | bash

docker_logout:
	docker logout ${DOCKER_REGISTRY}

docker_remote_list:
	docker images ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}

docker_bootstrap_init:
	${ROOT}/mk/scripts/bootstrap-init

docker_images:
	docker images -f "label=docker_ns=${DOCKER_NS}"

docker_labels:
	docker inspect --format '{{json .ContainerConfig.Labels}}' ${PACKAGE_NAME}:$(or ${C},${COMPOSE_DEFAULT})-${REVISION}|jq

docker_show_deps:
	@echo -n "INPUT\t\t->\tOUTPUT\n"
	@grep '^FROM' src/*.dockerb  | sed -e 's;^src/;;' -e 's;-[<].*;;'  -e 's;[.]dockerb:FROM;;' -e 's;tddium_site:;;' | awk '{ printf("%s\t->\t%s\n", $$2, $$1); }' | sort -r
