#! /usr/bin/env ruby
# Copyright (c) 2017-2019 Trough Creek Holdings, LLC.  All Rights Reserved.
#
#	${ROOT}/mk/scripts/docker-build-wrapper [-f] [-a <build-arg>] <docker-name>"

require 'json'
require 'open3'
require 'ostruct'
require 'optparse'
require 'fileutils'
require 'shellwords'

USAGE_MESSAGE = "Usage: docker-build-wrapper [-f] [-a <build-arg>] <docker-name>"

class DockerBuilder
  ENV_VARS = %w(BUILD_DATE BUILD_ROOT BUILD_REPO_ROOT CURDIR DOCKER_NS REVISION)

  attr_accessor :nop
  attr_accessor :force, :force_on_commit, :copy_paths
  attr_accessor :context_root, :build_root, :build_repo_root, :build_arg
  attr_accessor :docker_name, :docker_image, :docker_build_time
  attr_accessor :docker_rev_stamp, :docker_time_stamp, :docker_git_stamp
  attr_accessor :current_commit_id, :revision

  def initialize(docker_name, options)
    set_defaults

    options.each_pair do |k, v|
      instance_variable_set("@#{k}".to_sym, v)
    end

    @docker_name = docker_name

    if !@build_root.start_with?(@context_root) then
      raise ArgumentError.new("Context root must be a prefix of build root")
    end

    @has_ts = Kernel.system("which ts 2>&1 > /dev/null")
  end

  def has_ts?
    return !!@has_ts
  end

  def wrap_path
    return File.join(@context_root, '.dockerwrap')
  end

  def set_defaults
    @nop = false
    @force = false
    @force_on_commit = false
    @build_arg = []

    ENV_VARS.each do |var|
      if ENV[var].nil? then
        fail "Missing environment variable: #{var}"
      end

      instance_variable_set("@#{var.downcase}", ENV[var])
    end

    @context_root = @build_root
  end

  def fetch_env
    env = ENV.to_hash.merge({"DOCKER_BUILDKIT" => "1"})
  end

  def fetch_git_param(args)
    out = nil
    Dir.chdir($builder.build_repo_root) do
      cmd = "git rev-parse #{args.join(' ')}"
      out, err, status = Open3.capture3(cmd)
      if status.exitstatus != 0 then
        $stderr.puts "Unable to run git command: #{cmd.inspect}"
        Kernel.exit(1)
      end
    end
    out.chomp!
    return out
  end

  def fetch_metadata
    @docker_rev_stamp = expand_build_path(".stamp.revision.#{@docker_name}")
    @docker_time_stamp = expand_build_path(".stamp.time.#{@docker_name}")
    @docker_git_stamp = expand_build_path(".stamp.git.#{@docker_name}")

    @current_branch = fetch_git_param(%w(--abbrev-ref HEAD))
    @current_commit_id = fetch_git_param(%w(HEAD))

    @docker_image = "#{@docker_ns}:#{@docker_name}-#{@revision}"
    @docker_build_time = `docker inspect --format '{{index .Config.Labels "build_time"}}' #{@docker_image} 2> /dev/null || echo ''`.chomp
  end

  def update_metadata
    File.open(@docker_rev_stamp, 'w') { |f| f.puts(@revision) }
    File.open(@docker_time_stamp, 'w') { |f| f.puts(@build_date) }
    File.open(@docker_git_stamp, 'w') { |f| f.puts(@current_commit_id) }
  end

  def needs_update?
    ok = !@force
    ok &&= @revision == read_path_or_empty(@docker_rev_stamp)
    if @force_on_commit then
      ok &&= @current_commit_id == read_path_or_empty(@docker_git_stamp)
    end
    ok &&= @docker_build_time == read_path_or_empty(@docker_time_stamp)

    return !ok
  end

  def docker_context_setup
    FileUtils.rm_rf(wrap_path())

    FileUtils.mkdir_p(wrap_path())
    File.open(File.join(wrap_path(), 'metadata.json'), 'w+') do |file|
      file.puts JSON.pretty_generate(generate_docker_metadata())
    end

    if @copy_paths.empty? then
      return
    end

    @copy_paths.each do |src|
      sa = File.stat(src)
      sb = File.stat(wrap_path())

      if sa.ftype == 'file' && sa.dev == sb.dev then
        dst_name = File.basename(src)
        FileUtils.ln(src, File.join(wrap_path(), dst_name))
      else
        FileUtils.cp_r(src, wrap_path())
      end
    end
  end

  def docker_context_teardown
    FileUtils.rm_rf(wrap_path())
  end

  def generate_docker_metadata
    {revision: @revision,
     build_time: @build_date,
     branch_name: @current_branch,
     commit_id: @current_commit_id}
  end

  def generate_docker_command
    cmd = %w(docker build)
    if ENV['DOCKER_SQUASH'] then
      cmd << ENV['DOCKER_SQUASH']
    end
    cmd << %W(--no-cache) if @force
    cmd << %W(-f #{expand_build_path("Dockerfile.#{@docker_name}")})
    @build_arg.each do |arg|
      cmd << %W(--build-arg #{arg})
    end
    cmd << %W(--label revision=#{@revision})
    cmd << %W(--label build_time=#{@build_date})
    cmd << %W(--label branch_name=#{@current_branch})
    cmd << %W(--label commit_id=#{@current_commit_id})
    cmd << %W(-t #{@docker_image})
    cmd << %w(.)
    cmd = cmd.flatten(1)
    return cmd
  end

  def expand_build_path(name)
    path = File.expand_path(File.join(@build_root, 'docker', 'build', name))
    return path
  end

  def read_path_or_empty(path)
    if File.exists?(path) then
      return File.read(path).chomp
    end
    return ''
  end
end

options = Hash.new
options[:force] = false
options[:build_arg] = []
options[:copy_paths] = []

opt = OptionParser.new do |opts|
  opts.banner = USAGE_MESSAGE
  opts.on("-a", "--build-arg", "build-arg", :REQUIRED) do |arg|
    options[:build_arg] << arg
    options[:build_arg].uniq!
  end
  opts.on("-c", "--force-on-commit", "force on commit", :NONE) do
    options[:force_on_commit] = true
  end
  opts.on("-C", "--copy-context", "copy context path", :REQUIRED) do |path|
    if !File.exist?(path) then
      fail "copy context path must exist: #{root.inspect}"
    end
    options[:copy_paths] << path
  end
  opts.on("-f", "--force", "force", :NONE) do
    options[:force] = true
  end
  opts.on("-r", "--root", "root", :REQUIRED) do |root|
    if root.nil? || root.empty? then
      fail "invalid build_root: cannot be empty"
    elsif !File.directory?(root) then
      fail "invalid build_root (not a directory): #{root.inspect}"
    end
    options[:build_root] = root
  end
  opts.on("-R", "--context-root", "context-root", :REQUIRED) do |root|
    if root.nil? || root.empty? then
      fail "invalid context_root: cannot be empty"
    elsif !File.directory?(root) then
      fail "invalid context_root (not a directory): #{root.inspect}"
    end
    options[:context_root] = root
  end
end

opt.parse!

$builder = DockerBuilder.new(ARGV[0], options)
$builder.fetch_metadata

if !$builder.needs_update? then
  puts "Nothing to do for #{$builder.docker_image}"
  exit(0)
end

puts "Building #{$builder.docker_image}"
Dir.chdir($builder.context_root) do
  $builder.docker_context_setup

  cmd = $builder.generate_docker_command
  puts cmd.join(' ')
  if !$builder.nop then
    cmd = Shellwords.join(cmd)
    cmd += " | ts" if $builder.has_ts?
    if !system($builder.fetch_env, cmd) then
      fail "docker build failed"
    end
  end

  $builder.docker_context_teardown

  $builder.update_metadata
end
